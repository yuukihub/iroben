import TabbarElement from 'onsenui/esm/elements/ons-tabbar.js';
import { deriveEvents, hidable, selfProvider, modifier, unrecognizedListeners } from '../mixins/index.js';
import { resolveComponent, openBlock, createElementBlock, withModifiers, createElementVNode, renderSlot, Fragment, renderList, createBlock, resolveDynamicComponent, mergeProps, normalizeStyle } from 'vue';

const name = 'v-ons-tabbar';

  var script = {
    name,
    mixins: [deriveEvents(name), hidable, selfProvider, modifier, unrecognizedListeners(TabbarElement)],
    emits: ['update:activeIndex'],

    props: {
      tabs: {
        type: Array,
        validator(value) {
          return value.every(tab => ['icon', 'label', 'page'].some(prop => !!Object.getOwnPropertyDescriptor(tab, prop)));
        }
      },
      tabbarStyle: {
        type: null
      }
    },

    methods: {
      _tabKey(tab) {
        return tab.key || tab.label || tab.icon;
      }
    },
  };

const _hoisted_1 = ["modifier"];
const _hoisted_2 = { class: "tabbar__content" };
const _hoisted_3 = /*#__PURE__*/createElementVNode("div", null, null, -1);
const _hoisted_4 = /*#__PURE__*/createElementVNode("div", { class: "tabbar__border" }, null, -1);

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_v_ons_tab = resolveComponent("v-ons-tab");

  return (openBlock(), createElementBlock("ons-tabbar", {
    modifier: _ctx.normalizedModifier,
    onPrechange: _cache[0] || (_cache[0] = withModifiers($event => (_ctx.$nextTick(() => !$event.detail.canceled && _ctx.$emit('update:activeIndex', $event.index))), ["self"]))
  }, [
    createElementVNode("div", _hoisted_2, [
      createElementVNode("div", null, [
        renderSlot(_ctx.$slots, "pages", {}, () => [
          (openBlock(true), createElementBlock(Fragment, null, renderList($props.tabs, (tab) => {
            return (openBlock(), createBlock(resolveDynamicComponent(tab.page), mergeProps({ ..._ctx.unrecognizedListeners, ...tab.props }, {
              key: (tab.page.key || tab.page.name || $options._tabKey(tab))
            }), null, 16))
          }), 128))
        ])
      ]),
      _hoisted_3
    ]),
    createElementVNode("div", {
      class: "tabbar",
      style: normalizeStyle($props.tabbarStyle)
    }, [
      renderSlot(_ctx.$slots, "default", {}, () => [
        (openBlock(true), createElementBlock(Fragment, null, renderList($props.tabs, (tab) => {
          return (openBlock(), createBlock(_component_v_ons_tab, mergeProps(tab, {
            key: $options._tabKey(tab)
          }), null, 16))
        }), 128))
      ]),
      _hoisted_4
    ], 4)
  ], 40, _hoisted_1))
}

script.render = render;

export { script as default };
